<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>每日一讲-文本三剑客</title>
      <link href="/2024/11/04/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B2-linux-%E6%96%87%E6%9C%AC%E4%B8%89%E5%89%91%E5%AE%A2/"/>
      <url>/2024/11/04/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B2-linux-%E6%96%87%E6%9C%AC%E4%B8%89%E5%89%91%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-文本三剑客：grep、sed-和-awk"><a href="#Linux-文本三剑客：grep、sed-和-awk" class="headerlink" title="Linux 文本三剑客：grep、sed 和 awk"></a>Linux 文本三剑客：grep、sed 和 awk</h1><font color="#00BFFF"><i>在 Linux 的文本处理领域，sed、awk 和 grep 被誉为“文本三剑客”，它们各自承担着不同的任务，但又相辅相成，成为处理文本文件的强有力工具。在日常开发和系统管理中，掌握这三者能够显著提高工作效率。本文将详细介绍它们的功能、使用方法以及常见的应用场景。</i>></font><h2 id="1-grep：全局正则表达式打印"><a href="#1-grep：全局正则表达式打印" class="headerlink" title="1. grep：全局正则表达式打印"></a>1. grep：全局正则表达式打印</h2><h3 id="1-1-功能概述"><a href="#1-1-功能概述" class="headerlink" title="1.1 功能概述"></a>1.1 功能概述</h3><blockquote><p><strong>grep 是一个文本搜索工具，用于在文件中搜索匹配正则表达式的行，并将匹配到的行输出到标准输出。grep 的名称来源于“g&#x2F;re&#x2F;p”——全局正则表达式打印（global &#x2F; regular expression &#x2F; print）</strong></p></blockquote><h3 id="1-2-使用方法"><a href="#1-2-使用方法" class="headerlink" title="1.2 使用方法"></a>1.2 使用方法</h3><font color="#5F9E">基本语法：</font><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep [选项] pattern [文件...]  </span><br></pre></td></tr></table></figure><h3 id="1-3-常用选项"><a href="#1-3-常用选项" class="headerlink" title="1.3 常用选项"></a>1.3 常用选项</h3><ul><li>-i：忽略大小写，比如 grep -i “hello” file.txt。</li><li>-v：反向匹配，只输出不匹配的行。</li><li>-r：递归搜索目录及子目录。</li><li>-n：显示匹配行的行号。</li><li>-l：只列出匹配的文件名。</li><li>-c：只输出匹配的行数。</li><li>-E：使用扩展正则表达式。</li></ul><h3 id="1-4-正则表达式基础"><a href="#1-4-正则表达式基础" class="headerlink" title="1.4 正则表达式基础"></a>1.4 正则表达式基础</h3><ul><li>.：匹配任何单个字符（除了换行符）。</li><li>*：匹配前面的字符零次或多次。</li><li>+：匹配前面的字符一次或多次。</li><li>?：匹配前面的字符零次或一次。</li><li>[]：匹配括号内的任意一个字符。</li><li>[^]：匹配不在括号内的任意一个字符。</li><li>^：匹配行的开始。</li><li>$：匹配行的结束。</li><li>{n,m}：匹配前面的字符至少 n 次，最多 m 次。</li><li>|：逻辑或，用于匹配多个模式中的任意一个。</li></ul><h3 id="1-5-扩展正则和基本正则的区别"><a href="#1-5-扩展正则和基本正则的区别" class="headerlink" title="1.5 扩展正则和基本正则的区别"></a>1.5 扩展正则和基本正则的区别</h3><ol><li>元字符的区别：<blockquote><ul><li>在基本正则表达式中，某些元字符（如 ?, +, {, |, (, )）需要使用反斜杠 \ 进行转义才能生效。</li><li>在扩展正则表达式中，这些元字符不需要转义，可以直接使用。</li></ul></blockquote></li><li>工具支持：<blockquote><ul><li>一些工具默认使用基本正则表达式，如 grep。</li><li>一些工具提供选项来支持扩展正则表达式，如 grep -E 或 egrep。</li></ul></blockquote></li></ol><h3 id="1-6-示例"><a href="#1-6-示例" class="headerlink" title="1.6 示例"></a>1.6 示例</h3><p><em>统计data.txt包含“data”的行数:</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -c <span class="string">&quot;data&quot;</span> data.txt  </span><br></pre></td></tr></table></figure><p><em>递归搜索当前目录”TODO”的文件并列出文件名：</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -r -l <span class="string">&quot;TODO&quot;</span> .  </span><br></pre></td></tr></table></figure><p><em>找到 log.txt中所有包含 “error” 并且以 “Failed” 开头的行,忽略大小写</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -i <span class="string">&quot;^Failed.*error&quot;</span> log.txt</span><br></pre></td></tr></table></figure><h4 id="1-6-1-区分基本正则和扩展正则的直观例子"><a href="#1-6-1-区分基本正则和扩展正则的直观例子" class="headerlink" title="1.6.1 区分基本正则和扩展正则的直观例子"></a>1.6.1 <strong><i>区分基本正则和扩展正则的直观例子</i></strong></h4><p>找到example.txt中包含 “a” 2 到 4 次的行</p><blockquote><ol><li>基本正则：  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">&#x27;a\&#123;2,4\&#125;&#x27;</span> example.txt</span><br></pre></td></tr></table></figure></li><li>扩展正则：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -E <span class="string">&#x27;a&#123;2,4&#125;&#x27;</span> example.txt</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="2-sed：流编辑器"><a href="#2-sed：流编辑器" class="headerlink" title="2. sed：流编辑器"></a>2. sed：流编辑器</h2><h3 id="2-1-功能概述"><a href="#2-1-功能概述" class="headerlink" title="2.1 功能概述"></a>2.1 功能概述</h3><blockquote><p><strong>sed 是一个流编辑器，能够对输入文本进行编辑。与 grep 只做查找不同，sed 能够修改文本内容，适合于批量处理文本, 注意: sed操作默认不会改变原文件</strong></p></blockquote><h3 id="2-2-使用方法"><a href="#2-2-使用方法" class="headerlink" title="2.2 使用方法"></a>2.2 使用方法</h3><font color="#5F9E">基本语法：</font><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed [选项] <span class="string">&#x27;命令&#x27;</span> [文件...]  </span><br></pre></td></tr></table></figure><h3 id="2-3-常用选项"><a href="#2-3-常用选项" class="headerlink" title="2.3 常用选项"></a>2.3 常用选项</h3><blockquote><ul><li>-n：抑制默认输出，只输出被处理的行。</li><li>-e：允许连续使用多個命令。</li><li>-f：从指定文件中读取命令。</li><li>-i：在原文件上进行修改，而不是输出到标准输出。</li><li>-r 或 -E：使用扩展正则表达式（ERE）</li></ul></blockquote><h3 id="2-4-常用命令"><a href="#2-4-常用命令" class="headerlink" title="2.4 常用命令"></a>2.4 常用命令</h3><blockquote><ul><li>s&#x2F;pattern&#x2F;replacement&#x2F;：替换模式。</li><li>d：删除行。</li><li>p：打印行。</li><li>i：在指定行之前插入文本。</li><li>a：在指定行之后追加文本。</li><li>c：替换指定行的内容。</li><li>g：全局替换（在同一行中替换所有出现的模式）</li><li>y: 将字符串中的字符替换为其他字符。</li></ul></blockquote><h3 id="2-5-示例"><a href="#2-5-示例" class="headerlink" title="2.5 示例"></a>2.5 示例</h3><p><em>替换文件中的字符串：</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">&#x27;s/foo/bar/g&#x27;</span> file.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 于在 file.txt 文件中将所有出现的 &quot;foo&quot; 替换为 &quot;bar&quot;  </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># /g：表示全局替换，即在同一行中替换所有出现的 &quot;foo&quot;，而不仅仅是最先出现的一个</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em>删除包含“debug”的行：</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">&#x27;/debug/d&#x27;</span> file.txt  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em>删除 XX – XX 之间的行</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">&#x27;/start/,/end/d&#x27;</span> file.txt</span><br><span class="line"><span class="comment"># 删除从包含 &quot;start&quot; 的行到包含 &quot;end&quot; 的行之间的所有行</span></span><br></pre></td></tr></table></figure><p><em>插入文本：</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">&#x27;2i\This is an inserted line.&#x27;</span> file.txt  </span><br><span class="line"><span class="comment"># 用于在 file.txt 文件的第 2 行之前插入一行文本</span></span><br></pre></td></tr></table></figure><p><em>追加文本</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">&#x27;2a\This is an appended line.&#x27;</span> file.txt</span><br><span class="line"><span class="comment"># 用于在 file.txt 文件的第 2 行之后追加一行文本 &quot;This is an appended line.&quot;</span></span><br></pre></td></tr></table></figure><p><em>使用文件中的命令：</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed -f commands.sed file.txt  </span><br><span class="line"><span class="comment"># 执行存储在 commands.sed 文件中的多个 sed 命令，并将这些命令应用于 file.txt</span></span><br></pre></td></tr></table></figure><p><em>字符转换</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">&#x27;y/abc/def/&#x27;</span> file.txt</span><br><span class="line"><span class="comment"># 将文件中的 &#x27;a&#x27; 替换为 &#x27;d&#x27;，&#x27;b&#x27; 替换为 &#x27;e&#x27;，&#x27;c&#x27; 替换为 &#x27;f&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="3-awk：文本处理工具-概述版"><a href="#3-awk：文本处理工具-概述版" class="headerlink" title="3. awk：文本处理工具(概述版)"></a>3. awk：文本处理工具(概述版)</h2><h3 id="3-1-功能概述"><a href="#3-1-功能概述" class="headerlink" title="3.1 功能概述"></a>3.1 功能概述</h3><blockquote><p><strong>awk 是一种编程语言，用于文本处理与数据提取。其强大的模式匹配和处理能力，使其非常适合格式化文本和报表生成。awk也不会修改原文件，而是输出处理结果到标准输出。</strong></p></blockquote><h2 id="3-2-使用方法"><a href="#3-2-使用方法" class="headerlink" title="3.2 使用方法"></a>3.2 使用方法</h2><font color="#5F9E">基本语法：</font><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">&#x27;pattern &#123; action &#125;&#x27;</span> [文件...]</span><br></pre></td></tr></table></figure><h3 id="3-3-常用函数和变量"><a href="#3-3-常用函数和变量" class="headerlink" title="3.3 常用函数和变量"></a>3.3 常用函数和变量</h3><h4 id="常用变量"><a href="#常用变量" class="headerlink" title="常用变量"></a>常用变量</h4><blockquote><ul><li>$1, $2, …：表示行的字段，字段由分隔符（默认是空格或制表符）分隔。</li><li>$0：表示整行。</li><li>NF：表示当前行的字段数。</li><li>NR：表示当前处理的行号。</li><li>FILENAME：表示当前处理的文件名。</li><li>FS：字段分隔符，默认为空格或制表符。</li><li>OFS：输出字段分隔符，默认为空格。</li><li>ORS：输出记录分隔符，默认为换行符。</li><li>RS：记录分隔符，默认为换行符。</li></ul></blockquote><h4 id="常用内置函数"><a href="#常用内置函数" class="headerlink" title="常用内置函数"></a>常用内置函数</h4><blockquote><ul><li>print&#x2F;printf：打印指定的字段或表达式</li><li>length([string])：返回字符串的长度</li><li>substr(string, start, [length])：返回子字符串</li><li>split(string, array, [sep])：将字符串分割成数组</li><li>gsub(regexp, replacement, [target])：全局替换</li><li>…</li></ul></blockquote><h3 id="3-4-示例"><a href="#3-4-示例" class="headerlink" title="3.4 示例"></a>3.4 示例</h3><p><em>计算字符串的长度</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">&#x27;&#123; print length($0) &#125;&#x27;</span> file.txt</span><br><span class="line"><span class="comment"># $0指一整行, 这里是计算文件中每一行的长度</span></span><br></pre></td></tr></table></figure><p><em>打印特定行号的行和字段</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">&#x27;NR == 2 &#123; print $1 &#125;&#x27;</span> file.txt</span><br><span class="line"><span class="comment"># NR是行号, 这里是打印第2行的第一个字段(第一列)</span></span><br></pre></td></tr></table></figure><p><em>将每行按空格分割成数组并打印</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">&#x27;&#123; split($0, words, &quot; &quot;); for (i in words) print words[i] &#125;&#x27;</span> file.txt</span><br></pre></td></tr></table></figure><p><em>复杂一点的, 将第二行按空格分割成数组并打印</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">&#x27;NR == 2 &#123;</span></span><br><span class="line"><span class="string">    split($0, words, &quot; &quot;);</span></span><br><span class="line"><span class="string">    for (i in words) &#123;</span></span><br><span class="line"><span class="string">        print words[i];</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> file.txt</span><br></pre></td></tr></table></figure><p><em>打印第2行到第3行第一个字段的长度</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">&#x27;NR &gt;= 2 &amp;&amp; NR &lt;= 3 &#123; print length($1) &#125;&#x27;</span> file.txt</span><br></pre></td></tr></table></figure><p><em>将”New York”替换为”NYC”</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">&#x27;&#123; gsub(/New York/, &quot;NYC&quot;, $0); print &#125;&#x27;</span> data.txt</span><br></pre></td></tr></table></figure><p><em>子字符串截取</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">&#x27;&#123; print substr($0, 2, 5) &#125;&#x27;</span> file.txt</span><br><span class="line"><span class="comment"># 从 file.txt 文件的每一行中提取从第 2 个字符开始的长度为 5 的子字符串，并打印出来</span></span><br></pre></td></tr></table></figure><h2 id="4-三剑客结合使用"><a href="#4-三剑客结合使用" class="headerlink" title="4. 三剑客结合使用"></a>4. 三剑客结合使用</h2><blockquote><p><strong>这三款工具可以结合使用，以处理更复杂的文本处理任务。</strong></p></blockquote><ol><li>例如，将 grep 和 sed 联合使用，可以先过滤出需要的行，然后在这些行中替换内容：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">&quot;error&quot;</span> log.txt | sed <span class="string">&#x27;s/error/ERROR/g&#x27;</span>  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>同样，awk 可以和 grep 配合使用，先筛选行再进行字段提取或处理：</p><pre><code class="bash">grep &quot;2023&quot; log.txt | awk &#39;&#123;print $5&#125;&#39;</code></pre><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><p><strong>掌握 grep、sed 和 awk 是每个 Linux 用户、系统管理员和开发人员的重要技能。它们各有特长，但在文本处理任务中，能相互配合，形成强大而灵活的解决方案。熟练使用这三款软件，能够让您在处理文本数据时得心应手，提高工作效率。希望本文对您理解和使用 Linux 文本三剑客有所帮助！</strong></p>]]></content>
      
      
      <categories>
          
          <category> RHCE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一讲 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第七篇文章</title>
      <link href="/2024/11/03/%E4%B8%83/"/>
      <url>/2024/11/03/%E4%B8%83/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> RHCE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第九篇文章</title>
      <link href="/2024/11/03/%E4%B9%9D/"/>
      <url>/2024/11/03/%E4%B9%9D/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> RHCE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第五篇文章</title>
      <link href="/2024/11/03/%E4%BA%94/"/>
      <url>/2024/11/03/%E4%BA%94/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> RHCE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第八篇文章</title>
      <link href="/2024/11/03/%E5%85%AB/"/>
      <url>/2024/11/03/%E5%85%AB/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> RHCE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第六篇文章</title>
      <link href="/2024/11/03/%E5%85%AD/"/>
      <url>/2024/11/03/%E5%85%AD/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> RHCE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四篇文章</title>
      <link href="/2024/11/03/%E5%9B%9B/"/>
      <url>/2024/11/03/%E5%9B%9B/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> RHCE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇文章</title>
      <link href="/2024/11/03/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2024/11/03/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="这是我第一篇文章"><a href="#这是我第一篇文章" class="headerlink" title="这是我第一篇文章"></a>这是我第一篇文章</h2>]]></content>
      
      
      <categories>
          
          <category> RHCE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三篇文章</title>
      <link href="/2024/11/03/%E7%AC%AC%E4%B8%89%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2024/11/03/%E7%AC%AC%E4%B8%89%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 新华三杯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二篇文章</title>
      <link href="/2024/11/03/%E7%AC%AC%E4%BA%8C%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2024/11/03/%E7%AC%AC%E4%BA%8C%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> demo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
